# -*- coding: utf-8 -*-
"""Problem_B3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wU4m-if20PEUWDY6AOlJF-K6JoX36IBf
"""

import urllib.request
import zipfile
import tensorflow as tf
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator


class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('accuracy')>0.84 and logs.get('val_accuracy')>0.84):
            print("\nTraining Done !!!")
            self.model.stop_training = True

def solution_B3():
    data_url = 'https://github.com/dicodingacademy/assets/releases/download/release-rps/rps.zip'
    urllib.request.urlretrieve(data_url, 'rps.zip')
    local_file = 'rps.zip'
    zip_ref = zipfile.ZipFile(local_file, 'r')
    zip_ref.extractall('data/')
    zip_ref.close()

    TRAINING_DIR = "data/rps/"
    training_datagen = ImageDataGenerator(
        rescale=1./255,
        horizontal_flip=True,
        zoom_range=0.2,
        shear_range=0.2,
        rotation_range=20,
        validation_split=0.2)

    # YOUR IMAGE SIZE SHOULD BE 150x150
    # Make sure you used "categorical"
    train_generator= training_datagen.flow_from_directory(
        TRAINING_DIR,
        target_size=(150,150),
        color_mode='rgb',
        class_mode='categorical',
        subset='training')

    validation_datagen = ImageDataGenerator(rescale=1./255)
    validation_generator= training_datagen.flow_from_directory(
        TRAINING_DIR,
        target_size=(150,150),
        color_mode='rgb',
        class_mode='categorical',
        subset='validation')

    model = tf.keras.models.Sequential([
        # Convolutional layers
        tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),

        # Flatten the output of convolutional layers
        tf.keras.layers.Flatten(),

        # Dense layers
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(3, activation='softmax')  # 3 output neurons for rock, paper, scissors
    ])

    model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    model.fit(
        train_generator,
        epochs=25,  # Increased epochs for potential improvement
        steps_per_epoch=25,
        validation_data = validation_generator,
        verbose = 1,
        validation_steps=5,  # Increased validation steps for better assessment
        callbacks=[myCallback()])

    return model

if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model=solution_B3()
    model.save("model_B3.h5")